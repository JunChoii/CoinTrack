

import { formSchema } from "@/lib/validation";
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from "react-hook-form";
import * as z from 'zod';
import { updateExpense, Expense } from "@/network";
import { useMutation } from "@tanstack/react-query";
import { queryClient } from "@/main";
import { useNavigate } from "@tanstack/react-router";
// import { Form } from "@/components/ui/form";

export default function EditForm({
    id,
    title,
    total,
}:
    {
        id: number;
        title: string;
        total: number;
    }) {
    const Navigate = useNavigate();

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            title: title,
            total: total,
        },
    })

    const editExpenseMutation = useMutation({
        mutationFn: updateExpense,
        onSettled: () => queryClient.invalidateQueries({ "queryKey": ["expenseData"] })
    });

    const handleEditExpense = async (values: z.infer<typeof formSchema>) => {
        const { type, rating } = values;

        if (!title || !total || !id) {
            alert("Please fill out all fields")
            return
        }

        let newExpense: Expense = {
            id: id,
            title: "",
            total: 0,
        }; newExpense.title = title; newExpense.total = total;

        try {
            await editExpenseMutation.mutateAsync({ "id": id, newExpense });
        } catch (error) {
            alert("Error editing expense");
            console.log(error);
        } finally {
            Navigate({ to: "/" })
        }
    }

    return (
        <Form {...form}>
            <form onSubmit={form.handleSubmit(handleEditExpense)} className="space-y-8">
                <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Type</FormLabel>
                            <FormControl>
                                <Input {...field} />
                            </FormControl>
                            <FormDescription>
                                This is the type of expense you are rating
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="rating"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Rating</FormLabel>
                            <FormControl>
                                <Input
                                    type="number"
                                    {...field}
                                    onChange={(e) => {
                                        const value = e.target.value;
                                        field.onChange(value !== '' ? Number(value) : undefined);
                                    }}
                                />
                            </FormControl>
                            <FormDescription>
                                Please enter a number between 0 and 5 for the rating.
                            </FormDescription>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <Button type="submit">Submit</Button>
            </form>
        </Form>
    );
}
